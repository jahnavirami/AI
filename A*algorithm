import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start to current node
        self.h = 0  # Heuristic cost from current node to goal
        self.f = 0  # Total cost (g + h)

    def __lt__(self, other):
        return self.f < other.f

def heuristic(current, goal):
    # Using Manhattan distance as heuristic
    return abs(current[0] - goal[0]) + abs(current[1] - goal[1])

def a_star(graph, start, end):
    open_list = []
    closed_list = set()
    
    start_node = Node(start)
    end_node = Node(end)
    
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)
        
        if current_node.position == end_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path
        
        neighbors = [
            (0, -1), (0, 1), (-1, 0), (1, 0),  # Adjacent cells
            (-1, -1), (-1, 1), (1, -1), (1, 1)  # Diagonal cells
        ]
        
        for new_position in neighbors:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            
            if node_position[0] < 0 or node_position[0] >= len(graph) or node_position[1] < 0 or node_position[1] >= len(graph[0]):
                continue  # Make sure within range
                
            if graph[node_position[0]][node_position[1]] != 0:
                continue  # Make sure walkable terrain
            
            neighbor = Node(node_position, current_node)
            
            if neighbor.position in closed_list:
                continue
            
            neighbor.g = current_node.g + 1
            neighbor.h = heuristic(neighbor.position, end_node.position)
            neighbor.f = neighbor.g + neighbor.h
            
            if any(open_node.position == neighbor.position and open_node.g < neighbor.g for open_node in open_list):
                continue
            
            heapq.heappush(open_list, neighbor)
    
    return None  # No path found

# Example usage:
graph = [
    [0, 1, 0, 0, 0, 0],
    [0, 1, 0, 1, 1, 0],
    [0, 0, 0, 1, 0, 0],
    [0, 1, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0]
]

start = (0, 0)
end = (5, 5)
path = a_star(graph, start, end)

if path:
    print("Path found:", path)
else:
    print("No path found")
